package org.kok202.deepblock.canvas.block;

import javafx.geometry.Point3D;
import javafx.scene.Group;
import javafx.scene.paint.Color;
import lombok.*;
import org.kok202.deepblock.ai.entity.Layer;
import org.kok202.deepblock.canvas.polygon.block.BlockHexahedron;
import org.kok202.deepblock.canvas.singleton.CanvasSingleton;

@ToString(exclude = {"mainBlockModel", "subBlockModel"})
@EqualsAndHashCode(exclude = {"mainBlockModel", "subBlockModel"})
// IMPORTANT : Because using hash set.
// Or stack overflow can be generated by bidirectional reference.
public abstract class BlockNode {
    @Getter
    private BlockInfo blockInfo;

    @Getter(AccessLevel.PROTECTED)
    @Setter(AccessLevel.PROTECTED)
    private BlockHexahedron mainBlockModel;

    @Getter(AccessLevel.PROTECTED)
    @Setter(AccessLevel.PROTECTED)
    private BlockHexahedron subBlockModel;

    public BlockNode(Layer layer) {
        blockInfo = new BlockInfo(layer);
    }

    protected void setBlockCover(Color[] layerColors, Color[] activationColors){
        blockInfo.setLayerColors(layerColors);
        blockInfo.setActivationColors(activationColors);
        refreshBlockCover();
    }

    public void refreshBlockCover(){
        getMainBlockModel().setColors(getBlockInfo().getLayerColors());
        getMainBlockModel().setTextureSources(getBlockInfo().getLayerTextureSources());
        getMainBlockModel().refreshBlockCover();
        getSubBlockModel().setColors(getBlockInfo().getActivationColors());
        getSubBlockModel().setTextureSources(getBlockInfo().getActivationTextureSources());
        getSubBlockModel().refreshBlockCover();
    }

    public void translatePosition(double x, double y, double z){
        Point3D currentPosition = blockInfo.getPosition();
        Point3D targetPosition = currentPosition.add(x,y,z);
        setPosition(targetPosition.getX(), targetPosition.getY(), targetPosition.getZ());
    }
    public Point3D getPosition(){
        return blockInfo.getPosition();
    }

    public void setPosition(double x, double y, double z){
        getMainBlockModel().setPosition(x, y, z);
        getSubBlockModel().setPosition(x, y, z);
        getBlockInfo().setPosition(x, y, z);
    }

    public void addedToScene(Group sceneRoot, Point3D insertingPoint) {
        setPosition(insertingPoint.getX(), insertingPoint.getY(), 0);
        mainBlockModel.addedToScene(sceneRoot);
        subBlockModel.addedToScene(sceneRoot);
    }

    public void deleteBlockModel(){
        Group sceneRoot = CanvasSingleton.getInstance().getMainCanvas().getMainScene().getSceneRoot();
        mainBlockModel.removedFromScene(sceneRoot);
        mainBlockModel = null;
        subBlockModel.removedFromScene(sceneRoot);
        subBlockModel = null;
    }

    protected void deleteHexahedron(BlockHexahedron targetHexahedron){
        Group sceneRoot = CanvasSingleton.getInstance().getMainCanvas().getMainScene().getSceneRoot();
        targetHexahedron.removedFromScene(sceneRoot);
    }

    protected abstract void createBlockModel(Layer layer);
    public abstract boolean isPossibleToAppendFront();
    public abstract boolean isPossibleToAppendBack();
}

package org.kok202.deepblock.canvas.block;

import javafx.geometry.Point2D;
import javafx.geometry.Point3D;
import javafx.scene.Group;
import javafx.scene.paint.Color;
import lombok.EqualsAndHashCode;
import lombok.Getter;
import lombok.ToString;
import org.kok202.deepblock.ai.entity.Layer;
import org.kok202.deepblock.canvas.polygon.block.BlockHexahedron;
import org.kok202.deepblock.canvas.singleton.CanvasConstant;
import org.kok202.deepblock.canvas.singleton.CanvasSingleton;
import org.nd4j.linalg.activations.Activation;

@ToString(exclude = {"blockLayerModel", "blockActivationModel"})
@EqualsAndHashCode(exclude = {"blockLayerModel", "blockActivationModel"})
// IMPORTANT : Because using hash set.
// Or stack overflow can be generated by bidirectional reference.
public abstract class BlockNode {
    @Getter
    private BlockInfo blockInfo;
    @Getter
    private BlockHexahedron blockLayerModel;
    @Getter
    private BlockHexahedron blockActivationModel;

    public BlockNode(Layer layer, Point2D topSize, Point2D bottomSize) {
        Point2D middleSize = getMiddleSize(topSize, bottomSize);
        blockLayerModel = createBlock(topSize, middleSize, CanvasConstant.NODE_HEIGHT * (1 - CanvasConstant.NODE_ACTIVATION_RATIO));
        blockActivationModel = createBlock(middleSize, bottomSize, CanvasConstant.NODE_HEIGHT * (CanvasConstant.NODE_ACTIVATION_RATIO));
        blockInfo = new BlockInfo(layer);
    }

    protected void setBlockCover(Color[] layerColors, Color[] activationColors){
        blockInfo.setLayerColors(layerColors);
        blockInfo.setActivationColors(activationColors);
        refreshBlockCover();
    }

    private boolean isActivationFunctionExist(){
        return blockInfo.getLayer().getProperties().getActivationFunction() != null &&
                blockInfo.getLayer().getProperties().getActivationFunction() != Activation.IDENTITY;
    }

    protected void refreshBlockCover(){
        blockLayerModel.setColors(blockInfo.getLayerColors());
        blockLayerModel.setTextureSources(blockInfo.getLayerTextureSources());
        blockLayerModel.refreshBlockCover();
        blockActivationModel.setColors((isActivationFunctionExist())? blockInfo.getActivationColors() : blockInfo.getLayerColors());
        blockActivationModel.setTextureSources((isActivationFunctionExist())? blockInfo.getActivationTextureSources() : blockInfo.getLayerTextureSources());
        blockActivationModel.refreshBlockCover();
    }

    private Point2D getMiddleSize(Point2D topSize, Point2D bottomSize){
        return new Point2D(
                bottomSize.getX() + (topSize.getX() - bottomSize.getX()) * CanvasConstant.NODE_ACTIVATION_RATIO,
                bottomSize.getY() + (topSize.getY() - bottomSize.getY()) * CanvasConstant.NODE_ACTIVATION_RATIO);
    }

    private Point3D getTopBlockPosition(Point3D position){
        return getTopBlockPosition(position.getX(), position.getY(), position.getZ());
    }

    private Point3D getBottomBlockPosition(Point3D position){
        return getBottomBlockPosition(position.getX(), position.getY(), position.getZ());
    }

    private Point3D getTopBlockPosition(double x, double y, double z){
        return new Point3D(x, y - CanvasConstant.NODE_HEIGHT / 2 * (CanvasConstant.NODE_ACTIVATION_RATIO), z);
    }

    private Point3D getBottomBlockPosition(double x, double y, double z){
        return new Point3D(x, y + CanvasConstant.NODE_HEIGHT / 2 * (1 - CanvasConstant.NODE_ACTIVATION_RATIO), z);
    }

    public Point3D getPosition(){
        return blockInfo.getPosition();
    }

    public void setPosition(double x, double y, double z){
        blockLayerModel.setPosition(getTopBlockPosition(x, y, z));
        blockActivationModel.setPosition(getBottomBlockPosition(x, y, z));
        blockInfo.setPosition(x, y, z);
    }

    public void translatePosition(double x, double y, double z){
        Point3D currentPosition = blockInfo.getPosition();
        Point3D targetPosition = currentPosition.add(x,y,z);
        setPosition(targetPosition.getX(), targetPosition.getY(), targetPosition.getZ());
    }

    public void addedToScene(Group sceneRoot) {
        blockLayerModel.addedToScene(sceneRoot);
        blockActivationModel.addedToScene(sceneRoot);
    }

    private void deleteHexahedronModel(BlockHexahedron targetHexahedronModel){
        Group sceneRoot = CanvasSingleton.getInstance().getMainCanvas().getMainScene().getSceneRoot();
        targetHexahedronModel.removedFromScene(sceneRoot);
    }

    public void deleteBlockModel(){
        Group sceneRoot = CanvasSingleton.getInstance().getMainCanvas().getMainScene().getSceneRoot();
        blockLayerModel.removedFromScene(sceneRoot);
        blockLayerModel = null;
        blockActivationModel.removedFromScene(sceneRoot);
        blockActivationModel = null;
    }

    public void mutateBlockModel(Point2D topSize, Point2D bottomSize) {
        deleteHexahedronModel(blockLayerModel);
        deleteHexahedronModel(blockActivationModel);

        Point2D middleSize = getMiddleSize(topSize, bottomSize);
        blockLayerModel = recreateHexahedronModel(topSize, middleSize, CanvasConstant.NODE_HEIGHT * (1 - CanvasConstant.NODE_ACTIVATION_RATIO), getTopBlockPosition(blockInfo.getPosition()));
        blockActivationModel = recreateHexahedronModel(middleSize, bottomSize, CanvasConstant.NODE_HEIGHT * (CanvasConstant.NODE_ACTIVATION_RATIO), getBottomBlockPosition(blockInfo.getPosition()));
        refreshBlockCover();
    }

    private BlockHexahedron recreateHexahedronModel(Point2D topSize, Point2D bottomSize, float height, Point3D position){
        Group sceneRoot = CanvasSingleton.getInstance().getMainCanvas().getMainScene().getSceneRoot();
        BlockHexahedron blockLayerModel = createBlock(topSize, bottomSize, height);
        blockLayerModel.setPosition(position.getX(), position.getY(), position.getZ());
        blockLayerModel.addedToScene(sceneRoot);
        return blockLayerModel;
    }

    public BlockHexahedron createBlock(Point2D topSize, Point2D bottomSize, float height) {
        topSize = topSize.multiply(0.5);
        bottomSize = bottomSize.multiply(0.5);
        float halfNodeHeight = height / 2;
        return BlockHexahedron.builder()
                .leftTopFront(new Point3D(-topSize.getX(), -halfNodeHeight, -topSize.getY()))
                .leftTopBack(new Point3D(-topSize.getX(), -halfNodeHeight, topSize.getY()))
                .leftBottomFront(new Point3D(-bottomSize.getX(),  halfNodeHeight, -bottomSize.getY()))
                .leftBottomBack(new Point3D(-bottomSize.getX(),  halfNodeHeight, bottomSize.getY()))
                .rightTopFront(new Point3D(topSize.getX(), -halfNodeHeight, -topSize.getY()))
                .rightTopBack(new Point3D(topSize.getX(), -halfNodeHeight, topSize.getY()))
                .rightBottomFront(new Point3D(bottomSize.getX(),  halfNodeHeight, -bottomSize.getY()))
                .rightBottomBack(new Point3D(bottomSize.getX(),  halfNodeHeight, bottomSize.getY()))
                .textureSources(null)
                .colors(null)
                .blockNode(this)
                .build();
    }

}
